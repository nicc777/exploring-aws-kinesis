---
AWSTemplateFormatVersion: "2010-09-09"

Description: >
  This template creates the base VPC resources. Please note that there are a limit of 5 VPC's per region per AWS 
  account. Please refer to https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html for more 
  information regarding AWS VPC Limits. This template will also create a HTTP proxy in the public VPC for Internet 
  access. This is slightly cheaper than creating a NAT gateway stack.

# Metadata:
#   template metadata

Parameters:
  ProxyServerEc2AmiParam:
    Description: "Refer to https://aws.amazon.com/blogs/compute/query-for-the-latest-amazon-linux-ami-ids-using-aws-systems-manager-parameter-store/"
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  Ec2KeyPairKeyNameParam:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: "The EC2 Key Pair to allow SSH access to the instances"
  PublicVpcCidrParam:
    Type: String
    Default: "172.31.100.0/22"
  PublicVpcSubnet1CidrParam:
    Type: String
    Default: "172.31.100.0/24"
  PublicVpcSubnet2CidrParam:
    Type: String
    Default: "172.31.101.0/24"
  PublicVpcSubnet3CidrParam:
    Type: String
    Default: "172.31.102.0/24"
  PrivateVpcCidrParam:
    Type: String
    Default: "10.20.0.0/16"
  PrivateVpcSubnet1CidrParam:
    Type: String
    Default: "10.20.0.0/20"
  PrivateVpcSubnet2CidrParam:
    Type: String
    Default: "10.20.16.0/20"
  PrivateVpcSubnet3CidrParam:
    Type: String
    Default: "10.20.32.0/20"
  FirstTrustedInternetCiderParam:
    Type: String
    Description: "CIDR of a host or network from the Internet to trust for incoming traffic to the Public VPC"
    Default: "0.0.0.0/0"

# Rules:
#   set of rules

# Mappings:
#   set of mappings

# Conditions:
#   set of conditions

# Transform:
#   set of transforms

Resources:

#######################################################################################################################
###                                                                                                                 ###
###                                                   PRIVATE VPC                                                   ###
###                                                                                                                 ###
#######################################################################################################################

  PrivateVpc:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref PrivateVpcCidrParam
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: "default"
      Tags: 
        - Key: "Public"
          Value: "FALSE"

  PrivateVpcSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: !Ref PrivateVpcSubnet1CidrParam
      VpcId: !Ref PrivateVpc

  PrivateVpcSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: !Ref PrivateVpcSubnet2CidrParam
      VpcId: !Ref PrivateVpc

  PrivateVpcSubnet3:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Sub "${AWS::Region}c"
      CidrBlock: !Ref PrivateVpcSubnet3CidrParam
      VpcId: !Ref PrivateVpc

  PrivateVpcRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref PrivateVpc

  PrivateVpcSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateVpcRouteTable
      SubnetId: !Ref PrivateVpcSubnet1

  PrivateVpcSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateVpcRouteTable
      SubnetId: !Ref PrivateVpcSubnet2

  PrivateVpcSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateVpcRouteTable
      SubnetId: !Ref PrivateVpcSubnet3

#######################################################################################################################
###                                                                                                                 ###
###                                                    PUBLIC VPC                                                   ###
###                                                                                                                 ###
#######################################################################################################################

  PublicVpc:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref PublicVpcCidrParam
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: "default"
      Tags: 
        - Key: "Public"
          Value: "TRUE"

  PublicVpcInternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: PublicVpc
    Properties:
      Tags:
      - Key: "Public"
        Value: "TRUE"

  PublicVpcInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref PublicVpcInternetGateway
      VpcId: !Ref PublicVpc

  PublicVpcSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: !Ref PublicVpcSubnet1CidrParam
      VpcId: !Ref PublicVpc
      MapPublicIpOnLaunch: true

  PublicVpcSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: !Ref PublicVpcSubnet2CidrParam
      VpcId: !Ref PublicVpc
      MapPublicIpOnLaunch: true

  PublicVpcSubnet3:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Sub "${AWS::Region}c"
      CidrBlock: !Ref PublicVpcSubnet3CidrParam
      VpcId: !Ref PublicVpc
      MapPublicIpOnLaunch: true

  PublicVpcRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn:
    - PublicVpcInternetGatewayAttachment
    Properties: 
      VpcId: !Ref PublicVpc

  PublicVpcToInternetRoute:
    Type: AWS::EC2::Route
    DependsOn:
    - PublicVpcInternetGatewayAttachment
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      RouteTableId: !Ref PublicVpcRouteTable
      GatewayId: !Ref PublicVpcInternetGateway
  
  PublicVpcSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicVpcInternetGatewayAttachment
    Properties: 
      RouteTableId: !Ref PublicVpcRouteTable
      SubnetId: !Ref PublicVpcSubnet1

  PublicVpcSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicVpcInternetGatewayAttachment
    Properties: 
      RouteTableId: !Ref PublicVpcRouteTable
      SubnetId: !Ref PublicVpcSubnet2

  PublicVpcSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicVpcInternetGatewayAttachment
    Properties: 
      RouteTableId: !Ref PublicVpcRouteTable
      SubnetId: !Ref PublicVpcSubnet3

  
#######################################################################################################################
###                                                                                                                 ###
###                                                     ROUTING                                                     ###
###                                                                                                                 ###
#######################################################################################################################

  InterVpcPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId: !Ref PublicVpc
      PeerVpcId: !Ref PrivateVpc

  PublicVpcToPrivateVpcRoute:
    Type: AWS::EC2::Route
    DependsOn:
    - PublicVpc
    - PrivateVpc
    - PrivateVpcRouteTable
    Properties:
      DestinationCidrBlock: !Ref PrivateVpcCidrParam
      RouteTableId: !Ref PublicVpcRouteTable
      VpcPeeringConnectionId: !Ref InterVpcPeeringConnection

  PrivateVpcToPublicVpcRoute:
    Type: AWS::EC2::Route
    DependsOn:
    - PublicVpc
    - PrivateVpc
    - PublicVpcRouteTable
    Properties:
      DestinationCidrBlock: !Ref PublicVpcCidrParam
      RouteTableId: !Ref PrivateVpcRouteTable
      VpcPeeringConnectionId: !Ref InterVpcPeeringConnection

#######################################################################################################################
###                                                                                                                 ###
###                                               COMMON EC2 RESOURCES                                              ###
###                                                                                                                 ###
#######################################################################################################################

  TrustedInternetHostsPrefixList:
    Type: AWS::EC2::PrefixList
    Properties: 
      AddressFamily: "IPv4"
      Entries: 
        - Cidr: !Ref FirstTrustedInternetCiderParam
          Description: "A IP address or network from the Internet we trust"
      MaxEntries: 10
      PrefixListName: "TrustedInternetHostsPrefixList"

  InterVpcHostsPrefixList:
    Type: AWS::EC2::PrefixList
    Properties: 
      AddressFamily: "IPv4"
      Entries: 
        - Cidr: !Ref PublicVpcCidrParam
          Description: "Public VPC CIDR"
        - Cidr: !Ref PrivateVpcCidrParam
          Description: "Private VPC CIDR"
      MaxEntries: 3
      PrefixListName: "InterVpcHostsPrefixList"

  Ec2InstanceSsmKmsKey:
    Type: AWS::KMS::Key
    Properties: 
      Description: "KMS Key that can be used for traffic encryption when using SSM to connect to EC2 Instances"
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Id: "KmsCustomPolicyForEc2Ssm"
        Statement:
          Sid: "Enable IAM policies"
          Effect: "Allow"
          Principal:
            AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
          Action: "kms:*"
          Resource: "*"
      MultiRegion: false
      PendingWindowInDays: 7

  RootRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"

  ProxyServerInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - "sts:AssumeRole"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/AdministratorAccess"
      Path: /
      RoleName:
        Fn::Join:
        - '-'
        - - Ref: AWS::StackName
          - "ProxyServerInstanceRole"

  Ec2InstanceSsmPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - ssm:UpdateInstanceInformation
          - ssmmessages:CreateControlChannel
          - ssmmessages:CreateDataChannel
          - ssmmessages:OpenControlChannel
          - ssmmessages:OpenDataChannel
          Resource: "*"
        - Effect: Allow
          Action:
          - s3:GetEncryptionConfiguration
          Resource: "*"
        - Effect: Allow
          Action:
          - kms:Decrypt
          Resource: !GetAtt Ec2InstanceSsmKmsKey.Arn
      PolicyName: "Ec2InstanceSsmPolicy"
      Roles:
      - !Ref RootRole
      - !Ref ProxyServerInstanceRole

  # SSM Required VPC End Points - this will be required for EC2 instances launched in the Private VPC

  SsmEndPointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Proxy Server Security Group"
      GroupName: 
        Fn::Join:
        - '-'
        - - Ref: AWS::StackName
          - 'SsmEndPointSecurityGroup'
      VpcId: !Ref PrivateVpc

  SsmEndPointIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      Description: "Allow port 443/tcp (HTTPS)"
      FromPort: 443
      ToPort: 443
      GroupId: !Ref SsmEndPointSecurityGroup
      IpProtocol: tcp
      CidrIp: 0.0.0.0/0

  SsmEndPointAllEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties: 
      Description: "Allow all outgoing traffic"
      GroupId: !Ref SsmEndPointSecurityGroup
      IpProtocol: -1
      CidrIp: 0.0.0.0/0

  SsmEndPoint1:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      PrivateDnsEnabled: true
      SecurityGroupIds: 
        - !Ref SsmEndPointSecurityGroup
      ServiceName: "com.amazonaws.eu-central-1.ssm"
      SubnetIds: 
        - !Ref PrivateVpcSubnet1
        - !Ref PrivateVpcSubnet2
        - !Ref PrivateVpcSubnet3
      VpcEndpointType: "Interface"
      VpcId: !Ref PrivateVpc


#######################################################################################################################
###                                                                                                                 ###
###                                                 PROXY SERVER                                                    ###
###                                                                                                                 ###
#######################################################################################################################

  ProxyServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Proxy Server Security Group"
      GroupName: 
        Fn::Join:
        - '-'
        - - Ref: AWS::StackName
          - 'InstanceSecurityGroup'
      VpcId: !Ref PublicVpc

  ProxyServerSshIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      Description: "Allow port 22/tcp (SSH)"
      FromPort: 22
      ToPort: 22
      GroupId: !Ref ProxyServerSecurityGroup
      IpProtocol: tcp
      SourcePrefixListId: !Ref TrustedInternetHostsPrefixList

  ProxyServerProxyIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      Description: "Allow port 3128/tcp (HTTP_PROXY)"
      FromPort: 3128
      ToPort: 3128
      GroupId: !Ref ProxyServerSecurityGroup
      IpProtocol: tcp
      SourcePrefixListId: !Ref InterVpcHostsPrefixList

  AllEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties: 
      Description: "Allow all outgoing traffic"
      GroupId: !Ref ProxyServerSecurityGroup
      IpProtocol: -1
      CidrIp: 0.0.0.0/0

  ProxyServerInstanceIamProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName:
        Fn::Join:
        - '-'
        - - Ref: AWS::StackName
          - 'ThisInstanceProfile'
      Path: "/"
      Roles: 
        - !Ref ProxyServerInstanceRole

  ProxyServerInstanceHostLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateName:
        Fn::Join:
        - '-'
        - - Ref: AWS::StackName
          - 'LaunchTemplate'
      LaunchTemplateData:
        BlockDeviceMappings:
          - Ebs:
              VolumeSize: 8
              VolumeType: gp2
              DeleteOnTermination: true
              Encrypted: true
            DeviceName: /dev/sda1
        IamInstanceProfile:
          Arn: !GetAtt ProxyServerInstanceIamProfile.Arn
 
        ImageId: !Ref ProxyServerEc2AmiParam
        InstanceType: t3.large
        KeyName: !Ref Ec2KeyPairKeyNameParam
        SecurityGroupIds:
        - !Ref ProxyServerSecurityGroup
        MetadataOptions:
          HttpTokens: required
        UserData: 
          Fn::Base64:
            Fn::Sub: |
              MIME-Version: 1.0
              Content-Type: multipart/mixed; boundary="==BOUNDARY=="

              --==BOUNDARY==
              Content-Type: text/x-shellscript; charset="us-ascii"

              #!/bin/bash
              yum install -y squid telnet bind-utils nmap-ncat nmap mc python3 python3-pip python3-setuptools git curl vim

              systemctl enable squid.service
              systemctl start squid

              --==BOUNDARY==--

  ProxyServerAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      AutoScalingGroupName: !Sub "${AWS::StackName}-ProxyServerASG"
      DesiredCapacity: "1"
      LaunchTemplate: 
        LaunchTemplateId: !Ref ProxyServerInstanceHostLaunchTemplate
        Version: !GetAtt ProxyServerInstanceHostLaunchTemplate.LatestVersionNumber
      MaxSize: "1"
      MinSize: "1"
      NewInstancesProtectedFromScaleIn: false
      VPCZoneIdentifier: 
        - !Ref PublicVpcSubnet1
        - !Ref PublicVpcSubnet2
        - !Ref PublicVpcSubnet3


Outputs:

  PrivateVpcId:
    Description: "PrivateVpc ID"
    Value: !Ref PrivateVpc
    Export:
      Name: !Sub "${AWS::StackName}-PrivateVpcId"

  PrivateVpcCidrBlock:
    Description: "CIDR for PrivateVpc"
    Value: !GetAtt PrivateVpc.CidrBlock
    Export:
      Name: !Sub "${AWS::StackName}-PrivateVpcCidrBlock"

  PublicVpcId:
    Description: "PublicVpc ID"
    Value: !Ref PublicVpc
    Export:
      Name: !Sub "${AWS::StackName}-PublicVpcId"

  PublicVpcCidrBlock:
    Description: "CIDR for PublicVpc"
    Value: !GetAtt PublicVpc.CidrBlock
    Export:
      Name: !Sub "${AWS::StackName}-PublicVpcCidrBlock"

  PublicVpcSubnet1Id:
    Description: "ID for PublicVpcSubnet1"
    Value: !Ref PublicVpcSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PublicVpcSubnet1Id"

  PublicVpcSubnet2Id:
    Description: "ID for PublicVpcSubnet2"
    Value: !Ref PublicVpcSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PublicVpcSubnet2Id"

  PublicVpcSubnet3Id:
    Description: "ID for PublicVpcSubnet3"
    Value: !Ref PublicVpcSubnet3
    Export:
      Name: !Sub "${AWS::StackName}-PublicVpcSubnet3Id"

  PrivateVpcSubnet1Id:
    Description: "ID for PrivateVpcSubnet1"
    Value: !Ref PrivateVpcSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PrivateVpcSubnet1"

  PrivateVpcSubnet2Id:
    Description: "ID for PrivateVpcSubnet2"
    Value: !Ref PrivateVpcSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PrivateVpcSubnet2"

  PrivateVpcSubnet3Id:
    Description: "ID for PrivateVpcSubnet3"
    Value: !Ref PrivateVpcSubnet3
    Export:
      Name: !Sub "${AWS::StackName}-PrivateVpcSubnet3"
