---
AWSTemplateFormatVersion: "2010-09-09"

Description: >
  This template creates the resources that retrieve the latest website static files and copy it onto the FSX volume.
  The API Gateway will expose a Web Hook that can be defined in GitHub. The Lambda Function End-Point URL will link to
  a Lambda function that will start a EC2 instance that will mount the FSX volume, get the SSH key from Secrets Manager
  and copy the required files to the FSX volume. Once all is done, the EC2 instance will terminate itself.

# Metadata:
#   template metadata

Parameters:
  GitHubSyncServerEc2AmiParam:
    Description: "Refer to https://aws.amazon.com/blogs/compute/query-for-the-latest-amazon-linux-ami-ids-using-aws-systems-manager-parameter-store/"
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  VpcStackNameParam:
    Type: String
    Description: "The name of the VPC stack, in order to import values"
  GitHubSecretStackNameParam:
    Type: String
    Description: "the name of the CloudFormation Stack that deployed the GitHub SSH Key to Secrets Manager"
  ProxyServerStackNameParam:
    Type: String
    Description: "the name of the CloudFormation Stack that deployed the Proxy Server Resources"
  DnsStackNameParam:
    Type: String
    Description: "The name of the DNS stack, in order to import values"
  FsxStackNameParam:
    Type: String
    Description: "The name of the FSX stack, in order to import values"
  PythonRequirementsFileParam:
    Type: String
    Description: "The URL (Permalink) to the requirements.txt file" 
  PythonScriptFile:
    Type: String
    Description: "The URL (Permalink) to the github_sync.py file" 
  S3SourceBucketParam:
    Type: String
    Description: "The S3 bucket name containing the Lambda function ZIP file"
  SupportedRepositoriesParam:
    Type: String
    Description: "Comma delimited list of GitHub repositories to accept web hook requests from. Must be the value expected in the 'full_name' value of the repository data"
  GitHubAuthorizedSendersParam:
    Type: String
    Description: "Comma delimited list of authorized senders as what will be reported in the sender login field value"

# Rules:
#   set of rules

# Mappings:
#   set of mappings

# Conditions:
#   set of conditions

# Transform:
#   set of transforms

Resources:

#######################################################################################################################
###                                                                                                                 ###
###                                                  SQS Resources                                                  ###
###                                                                                                                 ###
#######################################################################################################################

  GitHubSyncRequestDeadLetterQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties: 
      MessageRetentionPeriod: 86400
      QueueName: "GitHubSyncRequestDeadLetterQueue"
      VisibilityTimeout: 60

  GitHubSyncRequestQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties: 
      MessageRetentionPeriod: 86400
      QueueName: "GitHubSyncRequestQueue"
      RedriveAllowPolicy:
        redrivePermission: "allowAll"
      RedrivePolicy:
        deadLetterTargetArn : !GetAtt GitHubSyncRequestDeadLetterQueue.Arn
        maxReceiveCount : 3
      VisibilityTimeout: 60


#######################################################################################################################
###                                                                                                                 ###
###                                GitHub Webhook Lambda Function that exposes an URL                               ###
###                                                                                                                 ###
#######################################################################################################################

  GitHubWebhookLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: "GitHubWebhookLambdaFunctionRoleAssumeRolePolicyDocument"
          Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
          Action: "sts:AssumeRole"
      Description: "Lambda role GitHubWebhookLambdaFunction"
      Policies:
      - PolicyName: GitHubWebhookLambdaFunctionPolicy01
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: "Allow"
            Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            Resource: arn:aws:logs:*:*:*
      - PolicyName: GitHubWebhookLambdaFunctionPolicy02
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - "sqs:SendMessage"
            Resource: !GetAtt GitHubSyncRequestQueue.Arn
      RoleName: GitHubWebhookLambdaFunctionRole

  GitHubWebhookLambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName:
        Fn::Sub:
        -  "/aws/lambda/${functionRef}"
        - functionRef: !Ref GitHubWebhookLambdaFunction
      RetentionInDays: 7

  GitHubWebhookLambdaFunction:
    Type: AWS::Lambda::Function
    Properties: 
      Architectures: 
      - "arm64"
      Environment:
        Variables: 
          SQS_URL: !GetAtt GitHubSyncRequestQueue.QueueUrl
          DEBUG: "1"
          SUPPORTED_REPOSITORIES: !Ref SupportedRepositoriesParam
          GITHUB_AUTHORIZED_SENDERS: !Ref GitHubAuthorizedSendersParam
      Code: 
        S3Bucket: !Ref S3SourceBucketParam
        S3Key: "github_webhook_lambda.zip"
      Description: "Handle the test event and emit event data to AWS Kinesis"
      FunctionName: "GitHubWebhookLambdaFunction"
      Handler: "github_webhook_lambda.handler"
      MemorySize: 128
      Role: !GetAtt GitHubWebhookLambdaFunctionRole.Arn
      Runtime: "python3.8"
      Timeout: 30

  GitHubWebhookLambdaFunctionUrlInvokePermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: "lambda:InvokeFunctionUrl"
      FunctionName: !GetAtt  GitHubWebhookLambdaFunction.Arn
      FunctionUrlAuthType: "NONE"
      Principal: "*"

  GitHubWebhookLambdaFunctionUrl:
    Type: AWS::Lambda::Url
    DependsOn:
      - "GitHubWebhookLambdaFunctionUrlInvokePermission"
    Properties: 
      AuthType: "NONE"
      TargetFunctionArn: !GetAtt  GitHubWebhookLambdaFunction.Arn


#######################################################################################################################
###                                                                                                                 ###
###                       Lambda Function to monitor and start EC2 Instance if Queue Count > 0                      ###
###                                                                                                                 ###
####################################################################################################################### 


  GitHubSyncServerStarterLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: "GitHubWebhookLambdaFunctionRoleAssumeRolePolicyDocument"
          Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
          Action: "sts:AssumeRole"
      Description: "Lambda role for GitHubSyncServerStarterLambdaFunction"
      Policies:
      - PolicyName: GitHubWebhookLambdaFunctionPolicy01
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: "Allow"
            Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            Resource: arn:aws:logs:*:*:*
      - PolicyName: GitHubWebhookLambdaFunctionPolicy02
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - "sqs:GetQueueAttributes"
            Resource: !GetAtt GitHubSyncRequestQueue.Arn
      - PolicyName: GitHubWebhookLambdaFunctionPolicy03
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - "ec2:DescribeInstances"
            Resource: "*"
      RoleName: GitHubSyncServerStarterLambdaFunctionRole

  GitHubSyncServerStarterLambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName:
        Fn::Sub:
        -  "/aws/lambda/${functionRef}"
        - functionRef: !Ref GitHubSyncServerStarterLambdaFunction
      RetentionInDays: 7

  GitHubSyncServerStarterLambdaFunction:
    Type: AWS::Lambda::Function
    Properties: 
      Architectures: 
      - "arm64"
      Environment:
        Variables: 
          SQS_URL: !GetAtt GitHubSyncRequestQueue.QueueUrl
          DEBUG: "1"
          SUPPORTED_REPOSITORIES: !Ref SupportedRepositoriesParam
          GITHUB_AUTHORIZED_SENDERS: !Ref GitHubAuthorizedSendersParam
      Code: 
        S3Bucket: !Ref S3SourceBucketParam
        S3Key: "github_syncserver_starter_lambda.zip"
      Description: "Handle the test event and emit event data to AWS Kinesis"
      FunctionName: "GitHubSyncServerStarterLambdaFunction"
      Handler: "github_syncserver_starter_lambda.handler"
      MemorySize: 128
      Role: !GetAtt GitHubSyncServerStarterLambdaFunctionRole.Arn
      Runtime: "python3.8"
      Timeout: 30


#######################################################################################################################
###                                                                                                                 ###
###                                               COMMON EC2 RESOURCES                                              ###
###                                                                                                                 ###
#######################################################################################################################

  GitHubSyncServerRootRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"

  GitHubSyncServerSsmPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - ssm:UpdateInstanceInformation
          - ssmmessages:CreateControlChannel
          - ssmmessages:CreateDataChannel
          - ssmmessages:OpenControlChannel
          - ssmmessages:OpenDataChannel
          Resource: "*"
        - Effect: Allow
          Action:
          - s3:GetEncryptionConfiguration
          Resource: "*"
        - Effect: Allow
          Action:
          - kms:Decrypt
          Resource: 
            Fn::ImportValue: !Sub "${ProxyServerStackNameParam}-Ec2InstanceSsmKmsKeyArn"
        - Effect: Allow
          Action:
          - secretsmanager:GetSecretValue
          - secretsmanager:DescribeSecret
          Resource:
            Fn::ImportValue: !Sub "${GitHubSecretStackNameParam}-GitHubSecretArn"
        - Effect: Allow
          Action: ec2:TerminateInstances
          Resource: !Sub "arn:${AWS::Partition}:ec2:*:${AWS::AccountId}:instance/*"
        - Effect: "Allow"
          Action:
          - "sqs:ReceiveMessage"
          - "sqs:DeleteMessage"
          - "sqs:GetQueueAttributes"
          - "sqs:ChangeMessageVisibility"
          Resource: !GetAtt GitHubSyncRequestQueue.Arn
      PolicyName: "GitHubSyncServerSsmPolicy"
      Roles:
      - !Ref GitHubSyncServerRootRole


#######################################################################################################################
###                                                                                                                 ###
###                                                   SYNC SERVER                                                   ###
###                                                                                                                 ###
#######################################################################################################################

  GitHubSyncServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Proxy Server Security Group"
      GroupName: 
        Fn::Join:
        - '-'
        - - Ref: AWS::StackName
          - 'InstanceSecurityGroup'
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackNameParam}-PrivateVpcId"

  AllEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties: 
      Description: "Allow all outgoing traffic"
      GroupId: !Ref GitHubSyncServerSecurityGroup
      IpProtocol: -1
      CidrIp: 0.0.0.0/0

  GitHubSyncServerInstanceIamProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName:
        Fn::Join:
        - '-'
        - - Ref: AWS::StackName
          - 'ThisInstanceProfile'
      Path: "/"
      Roles: 
        - !Ref GitHubSyncServerRootRole

  GitHubSyncServerInstanceHostLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateName:
        Fn::Join:
        - '-'
        - - Ref: AWS::StackName
          - 'LaunchTemplate'
      LaunchTemplateData:
        BlockDeviceMappings:
          - Ebs:
              VolumeSize: 8
              VolumeType: gp2
              DeleteOnTermination: true
              Encrypted: true
            DeviceName: /dev/sda1
        IamInstanceProfile:
          Arn: !GetAtt GitHubSyncServerInstanceIamProfile.Arn
        ImageId: !Ref GitHubSyncServerEc2AmiParam
        InstanceType: t3.medium
        SecurityGroupIds:
        - !Ref GitHubSyncServerSecurityGroup
        MetadataOptions:
          HttpTokens: required
        UserData: 
          Fn::Base64:
            Fn::Sub: 
            - |
              MIME-Version: 1.0
              Content-Type: multipart/mixed; boundary="==BOUNDARY=="

              --==BOUNDARY==
              Content-Type: text/x-shellscript; charset="us-ascii"

              #!/bin/bash
              export PROXY_URL="${ProxyServer}"
              echo "PROXY_URL=$PROXY_URL"

              cat << EOF > /tmp/proxy
              export http_proxy="$PROXY_URL"
              export https_proxy="$PROXY_URL"
              export ftp_proxy="$PROXY_URL"
              export no_proxy="127.0.0.1,localhost,169.254.169.254"
              # For curl
              export HTTP_PROXY="$PROXY_URL"
              export HTTPS_PROXY="$PROXY_URL"
              export FTP_PROXY="$PROXY_URL"
              export NO_PROXY="127.0.0.1,localhost,169.254.169.254"
              EOF

              cat /tmp/proxy >> /etc/profile

              source /tmp/proxy

              yum install -y git nfs-utils nfs4-acl-tools nfs-common python3 python3-pip python3-setuptools

              mkdir /data
              mount -t nfs -o nfsvers=4.1 ${OpenZfsDnsName}:/fsx/ /data
              mkdir /data/github
              mkdir /data/logs
              chmod 777 /data/github
              chmod 777 /data/logs

              mkdir /home/ec2-user/script
              chown ec2-user:ec2-user /home/ec2-user/script

              REQUIREMENTS_FILE=${RequirementsFile}
              SCRIPT_FILE=${ScriptFile}

              curl $REQUIREMENTS_FILE --output /home/ec2-user/script/requirements.txt --silent
              pip3 install -r /home/ec2-user/script/requirements.txt
              curl $SCRIPT_FILE --output /home/ec2-user/script/github_sync.py --silent

              cat << EOF >> /lib/systemd/system/githubsync.service
              [Unit]
              Description=Python based GitHub Sync Server
              After=multi-user.target

              [Service]
              Type=simple
              ExecStart=/usr/bin/python3 /home/ec2-user/script/github_sync.py
              User=ec2-user
              WorkingDirectory=/home/ec2-user

              [Install]
              WantedBy=multi-user.target
              EOF

              chmod 644 /lib/systemd/system/githubsync.service
              systemctl daemon-reload
              systemctl enable githubsync.service
              systemctl start githubsync.service

              # TODO Define and Start the service - As a last step, terminate myself...

              --==BOUNDARY==--
            - ProxyServer:
                Fn::Sub:
                - "http://proxy.${DomainName}:8080"
                - DomainName:
                    Fn::ImportValue: !Sub "${DnsStackNameParam}-PrivateDnsDomain"
              OpenZfsDnsName:
                Fn::ImportValue: !Sub "${FsxStackNameParam}-StaticWebRootFsxFilesystemDNSName"
              RequirementsFile: !Ref PythonRequirementsFileParam
              ScriptFile: !Ref PythonScriptFile
      TagSpecifications: 
      - ResourceType: "launch-template"
        Tags: 
          - Key: "Role"
            Value: "proxy-server"




Outputs:

  GitHubWebhookLambdaFunctionUrl:
    Description: "ID for GitHubWebhookLambdaFunctionUrl"
    Value: !GetAtt  GitHubWebhookLambdaFunctionUrl.FunctionUrl
    Export:
      Name: !Sub "${AWS::StackName}-GitHubWebhookLambdaFunctionUrl"
