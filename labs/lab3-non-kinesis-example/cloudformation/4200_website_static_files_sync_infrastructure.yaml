---
AWSTemplateFormatVersion: "2010-09-09"

Description: >
  This template creates the resources that retrieve the latest website static files and copy it onto the FSX volume.
  The API Gateway will expose a Web Hook that can be defined in GitHub. The API Gateway End-Point will link to a Lambda
  function that will start a EC2 instance that will mount the FSX volume, get the SSH key from Secrets Manager and copy
  the required files to the FSX volume. Once all is done, the EC2 instance will terminate itself.

# Metadata:
#   template metadata

Parameters:
  WebsiteSyncServerEc2AmiParam:
    Description: "Refer to https://aws.amazon.com/blogs/compute/query-for-the-latest-amazon-linux-ami-ids-using-aws-systems-manager-parameter-store/"
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  VpcStackNameParam:
    Type: String
    Description: "The name of the VPC stack, in order to import values"
  InternetCidr:
    Type: String
    Description: "CIDR of a host or network from the Internet to trust for incoming traffic"
    Default: "0.0.0.0/0"
  GitHubSecretStackNameParam:
    Type: String
    Description: "the name of the CloudFormation Stack that deployed the GitHub SSH Key to Secrets Manager"
  ProxyServerStackNameParam:
    Type: String
    Description: "the name of the CloudFormation Stack that deployed the Proxy Server Resources"

# Rules:
#   set of rules

# Mappings:
#   set of mappings

# Conditions:
#   set of conditions

# Transform:
#   set of transforms

Resources:

#######################################################################################################################
###                                                                                                                 ###
###                                               COMMON EC2 RESOURCES                                              ###
###                                                                                                                 ###
#######################################################################################################################

  TrustedInternetHostsPrefixList:
    Type: AWS::EC2::PrefixList
    Properties: 
      AddressFamily: "IPv4"
      Entries: 
        - Cidr: !Ref InternetCidr
          Description: "A IP address or network from the Internet we trust"
      MaxEntries: 10
      PrefixListName: "TrustedInternetHostsPrefixList"

  InterVpcHostsPrefixList:
    Type: AWS::EC2::PrefixList
    Properties: 
      AddressFamily: "IPv4"
      Entries: 
        - Cidr: 
            Fn::ImportValue: !Sub "${VpcStackNameParam}-PublicVpcCidrBlock"
          Description: "Public VPC CIDR"
        - Cidr: 
            Fn::ImportValue: !Sub "${VpcStackNameParam}-PrivateVpcCidrBlock"
          Description: "Private VPC CIDR"
      MaxEntries: 3
      PrefixListName: "InterVpcHostsPrefixList"

  Ec2InstanceSsmKmsKey:
    Type: AWS::KMS::Key
    Properties: 
      Description: "KMS Key that can be used for traffic encryption when using SSM to connect to EC2 Instances"
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Id: "KmsCustomPolicyForEc2Ssm"
        Statement:
          Sid: "Enable IAM policies"
          Effect: "Allow"
          Principal:
            AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
          Action: "kms:*"
          Resource: "*"
      MultiRegion: false
      PendingWindowInDays: 7

  RootRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"

  WebsiteSyncServerSsmPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - ssm:UpdateInstanceInformation
          - ssmmessages:CreateControlChannel
          - ssmmessages:CreateDataChannel
          - ssmmessages:OpenControlChannel
          - ssmmessages:OpenDataChannel
          Resource: "*"
        - Effect: Allow
          Action:
          - s3:GetEncryptionConfiguration
          Resource: "*"
        - Effect: Allow
          Action:
          - kms:Decrypt
          Resource: 
            Fn::ImportValue: !Sub "${ProxyServerStackNameParam}-Ec2InstanceSsmKmsKeyArn"
        - Effect: Allow
          Action:
          - secretsmanager:GetSecretValue
          - secretsmanager:DescribeSecret
          Resource: !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:NAME"
        - Effect: Allow
          Action: ec2:TerminateInstances
          Resource: !Sub "arn:${AWS::Partition}:ec2:*:${AWS::AccountId}:instance/*"
      PolicyName: "WebsiteSyncServerSsmPolicy"
      Roles:
      - !Ref RootRole


#######################################################################################################################
###                                                                                                                 ###
###                                                 PROXY SERVER                                                    ###
###                                                                                                                 ###
#######################################################################################################################

  WebsiteSyncServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Proxy Server Security Group"
      GroupName: 
        Fn::Join:
        - '-'
        - - Ref: AWS::StackName
          - 'InstanceSecurityGroup'
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackNameParam}-PublicVpcId"

  WebsiteSyncServerProxyIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      Description: "Allow port 3128/tcp (HTTP_PROXY)"
      FromPort: 3128
      ToPort: 3128
      GroupId: !Ref WebsiteSyncServerSecurityGroup
      IpProtocol: tcp
      SourcePrefixListId: !Ref InterVpcHostsPrefixList

  AllEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties: 
      Description: "Allow all outgoing traffic"
      GroupId: !Ref WebsiteSyncServerSecurityGroup
      IpProtocol: -1
      CidrIp: 0.0.0.0/0

  WebsiteSyncServerInstanceIamProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName:
        Fn::Join:
        - '-'
        - - Ref: AWS::StackName
          - 'ThisInstanceProfile'
      Path: "/"
      Roles: 
        - !Ref WebsiteSyncServerInstanceRole

  WebsiteSyncServerInstanceHostLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateName:
        Fn::Join:
        - '-'
        - - Ref: AWS::StackName
          - 'LaunchTemplate'
      LaunchTemplateData:
        BlockDeviceMappings:
          - Ebs:
              VolumeSize: 8
              VolumeType: gp2
              DeleteOnTermination: true
              Encrypted: true
            DeviceName: /dev/sda1
        IamInstanceProfile:
          Arn: !GetAtt WebsiteSyncServerInstanceIamProfile.Arn
 
        ImageId: !Ref WebsiteSyncServerEc2AmiParam
        InstanceType: t3.large
        KeyName: !Ref Ec2KeyPairKeyNameParam
        SecurityGroupIds:
        - !Ref WebsiteSyncServerSecurityGroup
        MetadataOptions:
          HttpTokens: required
        UserData: 
          Fn::Base64:
            Fn::Sub: |
              MIME-Version: 1.0
              Content-Type: multipart/mixed; boundary="==BOUNDARY=="

              --==BOUNDARY==
              Content-Type: text/x-shellscript; charset="us-ascii"

              #!/bin/bash
              yum install -y squid telnet bind-utils nmap-ncat nmap mc python3 python3-pip python3-setuptools git curl vim

              systemctl enable squid.service
              systemctl start squid

              --==BOUNDARY==--
      TagSpecifications: 
      - ResourceType: "instance"
        Tags: 
          - Key: "Role"
            Value: "proxy-server"


  WebsiteSyncServerElbv2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      HealthCheckPort: 3128
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      IpAddressType: "ipv4"
      Matcher: 
        HttpCode: "200-400"
      Name: "WebsiteSyncServerElbv2TargetGroup"
      Port: 3128
      Protocol: "HTTP"
      TargetType: "instance"
      UnhealthyThresholdCount: 3
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackNameParam}-PublicVpcId"

  WebsiteSyncServerAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      AutoScalingGroupName: !Sub "${AWS::StackName}-WebsiteSyncServerASG"
      DesiredCapacity: "1"
      LaunchTemplate: 
        LaunchTemplateId: !Ref WebsiteSyncServerInstanceHostLaunchTemplate
        Version: !GetAtt WebsiteSyncServerInstanceHostLaunchTemplate.LatestVersionNumber
      MaxSize: "1"
      MinSize: "1"
      NewInstancesProtectedFromScaleIn: false
      VPCZoneIdentifier: 
        - Fn::ImportValue: !Sub "${VpcStackNameParam}-PublicVpcSubnet1Id"
        - Fn::ImportValue: !Sub "${VpcStackNameParam}-PublicVpcSubnet2Id"
        - Fn::ImportValue: !Sub "${VpcStackNameParam}-PublicVpcSubnet3Id"
      TargetGroupARNs: 
      - !Ref WebsiteSyncServerElbv2TargetGroup
      Tags: 
      - Key: "Name"
        PropagateAtLaunch: true
        Value: "internet-proxy"


  WebsiteSyncServerElbv2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "WebsiteSyncServerElbv2SecurityGroup"
      GroupDescription: "Enable Proxy Server access on the inbound port for ELB"
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackNameParam}-PublicVpcId"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3128
          ToPort: 3128
          SourcePrefixListId: !Ref InterVpcHostsPrefixList
      Tags:
        - Key: Name
          Value: WebsiteSyncServerElbv2SecurityGroup

  WebsiteSyncServerElbv2:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: "ipv4"
      Name: "WebsiteSyncServerElbv2"
      Scheme: "internal"
      SecurityGroups: 
      - !Ref WebsiteSyncServerElbv2SecurityGroup
      SubnetMappings: 
      - SubnetId:
          Fn::ImportValue: !Sub "${VpcStackNameParam}-PublicVpcSubnet1Id"
      - SubnetId:
          Fn::ImportValue: !Sub "${VpcStackNameParam}-PublicVpcSubnet2Id"
      - SubnetId:
          Fn::ImportValue: !Sub "${VpcStackNameParam}-PublicVpcSubnet3Id"
      Type: "application"
  
  WebsiteSyncServerElbv2Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
      - Type: "forward"
        TargetGroupArn: !Ref WebsiteSyncServerElbv2TargetGroup
      LoadBalancerArn: !Ref WebsiteSyncServerElbv2
      Port: 8080
      Protocol: "HTTP"

  WebsiteSyncServerDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : 
        Fn::ImportValue: !Sub "${DnsStackNameParam}-PrivateDnsZoneId"
      Name:
        Fn::Sub:
        - "proxy.${DomainName}"
        - DomainName:
            Fn::ImportValue: !Sub "${DnsStackNameParam}-PrivateDnsDomain"
      ResourceRecords:
      - !GetAtt WebsiteSyncServerElbv2.DNSName
      TTL: 300
      Type: "CNAME"

# Outputs:

#   PrivateVpcSubnet3Id:
#     Description: "ID for PrivateVpcSubnet3"
#     Value: !Ref PrivateVpcSubnet3
#     Export:
#       Name: !Sub "${AWS::StackName}-PrivateVpcSubnet3"
