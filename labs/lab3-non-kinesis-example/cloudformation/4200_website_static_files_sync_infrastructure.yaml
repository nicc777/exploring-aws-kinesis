---
AWSTemplateFormatVersion: "2010-09-09"

Description: >
  This template creates the resources that retrieve the latest website static files and copy it onto the FSX volume.
  The API Gateway will expose a Web Hook that can be defined in GitHub. The Lambda Function End-Point URL will link to
  a Lambda function that will start a EC2 instance that will mount the FSX volume, get the SSH key from Secrets Manager
  and copy the required files to the FSX volume. Once all is done, the EC2 instance will terminate itself.

# Metadata:
#   template metadata

Parameters:
  WebsiteSyncServerEc2AmiParam:
    Description: "Refer to https://aws.amazon.com/blogs/compute/query-for-the-latest-amazon-linux-ami-ids-using-aws-systems-manager-parameter-store/"
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  VpcStackNameParam:
    Type: String
    Description: "The name of the VPC stack, in order to import values"
  InternetCidr:
    Type: String
    Description: "CIDR of a host or network from the Internet to trust for incoming traffic"
    Default: "0.0.0.0/0"
  GitHubSecretStackNameParam:
    Type: String
    Description: "the name of the CloudFormation Stack that deployed the GitHub SSH Key to Secrets Manager"
  ProxyServerStackNameParam:
    Type: String
    Description: "the name of the CloudFormation Stack that deployed the Proxy Server Resources"

# Rules:
#   set of rules

# Mappings:
#   set of mappings

# Conditions:
#   set of conditions

# Transform:
#   set of transforms

Resources:

#######################################################################################################################
###                                                                                                                 ###
###                                               COMMON EC2 RESOURCES                                              ###
###                                                                                                                 ###
#######################################################################################################################

  TrustedInternetHostsPrefixList:
    Type: AWS::EC2::PrefixList
    Properties: 
      AddressFamily: "IPv4"
      Entries: 
        - Cidr: !Ref InternetCidr
          Description: "A IP address or network from the Internet we trust"
      MaxEntries: 10
      PrefixListName: "TrustedInternetHostsPrefixList"

  InterVpcHostsPrefixList:
    Type: AWS::EC2::PrefixList
    Properties: 
      AddressFamily: "IPv4"
      Entries: 
        - Cidr: 
            Fn::ImportValue: !Sub "${VpcStackNameParam}-PublicVpcCidrBlock"
          Description: "Public VPC CIDR"
        - Cidr: 
            Fn::ImportValue: !Sub "${VpcStackNameParam}-PrivateVpcCidrBlock"
          Description: "Private VPC CIDR"
      MaxEntries: 3
      PrefixListName: "InterVpcHostsPrefixList"

  RootRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"

  WebsiteSyncServerSsmPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - ssm:UpdateInstanceInformation
          - ssmmessages:CreateControlChannel
          - ssmmessages:CreateDataChannel
          - ssmmessages:OpenControlChannel
          - ssmmessages:OpenDataChannel
          Resource: "*"
        - Effect: Allow
          Action:
          - s3:GetEncryptionConfiguration
          Resource: "*"
        - Effect: Allow
          Action:
          - kms:Decrypt
          Resource: 
            Fn::ImportValue: !Sub "${ProxyServerStackNameParam}-Ec2InstanceSsmKmsKeyArn"
        - Effect: Allow
          Action:
          - secretsmanager:GetSecretValue
          - secretsmanager:DescribeSecret
          Resource: !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:NAME"
        - Effect: Allow
          Action: ec2:TerminateInstances
          Resource: !Sub "arn:${AWS::Partition}:ec2:*:${AWS::AccountId}:instance/*"
      PolicyName: "WebsiteSyncServerSsmPolicy"
      Roles:
      - !Ref RootRole


#######################################################################################################################
###                                                                                                                 ###
###                                                   SYNC SERVER                                                   ###
###                                                                                                                 ###
#######################################################################################################################

  WebsiteSyncServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Proxy Server Security Group"
      GroupName: 
        Fn::Join:
        - '-'
        - - Ref: AWS::StackName
          - 'InstanceSecurityGroup'
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackNameParam}-PublicVpcId"

  AllEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties: 
      Description: "Allow all outgoing traffic"
      GroupId: !Ref WebsiteSyncServerSecurityGroup
      IpProtocol: -1
      CidrIp: 0.0.0.0/0

  WebsiteSyncServerInstanceIamProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName:
        Fn::Join:
        - '-'
        - - Ref: AWS::StackName
          - 'ThisInstanceProfile'
      Path: "/"
      Roles: 
        - !Ref RootRole

  WebsiteSyncServerInstanceHostLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateName:
        Fn::Join:
        - '-'
        - - Ref: AWS::StackName
          - 'LaunchTemplate'
      LaunchTemplateData:
        BlockDeviceMappings:
          - Ebs:
              VolumeSize: 8
              VolumeType: gp2
              DeleteOnTermination: true
              Encrypted: true
            DeviceName: /dev/sda1
        IamInstanceProfile:
          Arn: !GetAtt WebsiteSyncServerInstanceIamProfile.Arn
        ImageId: !Ref WebsiteSyncServerEc2AmiParam
        InstanceType: t3.large
        SecurityGroupIds:
        - !Ref WebsiteSyncServerSecurityGroup
        MetadataOptions:
          HttpTokens: required
        UserData: 
          Fn::Base64:
            Fn::Sub: |
              MIME-Version: 1.0
              Content-Type: multipart/mixed; boundary="==BOUNDARY=="

              --==BOUNDARY==
              Content-Type: text/x-shellscript; charset="us-ascii"

              #!/bin/bash
              yum install -y git python3

              --==BOUNDARY==--
      TagSpecifications: 
      - ResourceType: "instance"
        Tags: 
          - Key: "Role"
            Value: "proxy-server"




# Outputs:

#   PrivateVpcSubnet3Id:
#     Description: "ID for PrivateVpcSubnet3"
#     Value: !Ref PrivateVpcSubnet3
#     Export:
#       Name: !Sub "${AWS::StackName}-PrivateVpcSubnet3"
