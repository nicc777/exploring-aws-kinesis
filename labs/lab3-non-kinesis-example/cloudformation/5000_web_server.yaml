---
AWSTemplateFormatVersion: "2010-09-09"

Description: >
  This template is the base template for the API Gateway basic resources. It does not include routes or integrations - 
  each route and integration will have their own stack.

# Metadata:
#   template metadata

Parameters:
  CorsTrustedDomainsParam:
    Type: String
    Description: "A CSV string with trusted domains for API calls. Example to add two sites: https://www.example.tld,http://localhost:5000"
    Default: "http://localhost,http://localhost:9000,https://internal.sandybox.com"
  WebServerEc2AmiParam:
    Description: "Refer to https://aws.amazon.com/blogs/compute/query-for-the-latest-amazon-linux-ami-ids-using-aws-systems-manager-parameter-store/"
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  VpcStackNameParam:
    Type: String
    Description: "The name of the VPC stack, in order to import values"
  DnsStackNameParam:
    Type: String
    Description: "The name of the DNS stack, in order to import values"
  FirstTrustedInternetCiderParam:
    Type: String
    Description: "CIDR of a host or network from the Internet to trust for incoming traffic to the Private VPC"
    Default: "0.0.0.0/0"
  FsxStackNameParam:
    Type: String
    Description: "The name of the FSX stack, in order to import values"
  PublicDnsHostedZoneIdParam:
    Type: String
    Description: "The Hosted Zone ID (Route 53) of the public DNS zone"
  PublicDnsNameParam:
    Type: String
    Description: "The domain name of the public DNS zone, for example: example.tld"

# Rules:
#   set of rules

# Mappings:
#   set of mappings

# Conditions:
#   set of conditions

# Transform:
#   set of transforms

Resources:

#######################################################################################################################
###                                                                                                                 ###
###                                               COMMON EC2 RESOURCES                                              ###
###                                                                                                                 ###
#######################################################################################################################

  Ec2InstanceSsmKmsKey:
    Type: AWS::KMS::Key
    Properties: 
      Description: "KMS Key that can be used for traffic encryption when using SSM to connect to EC2 Instances"
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Id: "KmsCustomPolicyForEc2Ssm"
        Statement:
          Sid: "Enable IAM policies"
          Effect: "Allow"
          Principal:
            AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
          Action: "kms:*"
          Resource: "*"
      MultiRegion: false
      PendingWindowInDays: 7

  RootRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"

  WebServerInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - "sts:AssumeRole"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/AdministratorAccess"
      Path: /
      RoleName:
        Fn::Join:
        - '-'
        - - Ref: AWS::StackName
          - "WebServerInstanceRole"

  Ec2InstanceSsmPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - ssm:UpdateInstanceInformation
          - ssmmessages:CreateControlChannel
          - ssmmessages:CreateDataChannel
          - ssmmessages:OpenControlChannel
          - ssmmessages:OpenDataChannel
          Resource: "*"
        - Effect: Allow
          Action:
          - s3:GetEncryptionConfiguration
          Resource: "*"
        - Effect: Allow
          Action:
          - kms:Decrypt
          Resource: !GetAtt Ec2InstanceSsmKmsKey.Arn
      PolicyName: "Ec2InstanceSsmPolicy"
      Roles:
      - !Ref RootRole
      - !Ref WebServerInstanceRole


#######################################################################################################################
###                                                                                                                 ###
###                                                    WEB SERVER                                                   ###
###                                                                                                                 ###
#######################################################################################################################

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Web Server Security Group"
      GroupName: 
        Fn::Join:
        - '-'
        - - Ref: AWS::StackName
          - 'InstanceSecurityGroup'
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackNameParam}-PublicVpcId"

  WebServer8080Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      Description: "Allow port 8080/tcp (HTTP_Web)"
      FromPort: 8080
      ToPort: 8080
      GroupId: !Ref WebServerSecurityGroup
      IpProtocol: tcp
      CidrIp:
        Fn::ImportValue: !Sub "${VpcStackNameParam}-PublicVpcCidrBlock"

  WebServe8081Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      Description: "Allow port 8081/tcp (HTTP_Web)"
      FromPort: 8081
      ToPort: 8081
      GroupId: !Ref WebServerSecurityGroup
      IpProtocol: tcp
      CidrIp:
        Fn::ImportValue: !Sub "${VpcStackNameParam}-PublicVpcCidrBlock"

  AllEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties: 
      Description: "Allow all outgoing traffic"
      GroupId: !Ref WebServerSecurityGroup
      IpProtocol: -1
      CidrIp: 0.0.0.0/0

  WebServerInstanceIamProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName:
        Fn::Join:
        - '-'
        - - Ref: AWS::StackName
          - 'ThisInstanceProfile'
      Path: "/"
      Roles: 
        - !Ref WebServerInstanceRole

  WebServerInstanceHostLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateName:
        Fn::Join:
        - '-'
        - - Ref: AWS::StackName
          - 'LaunchTemplate'
      LaunchTemplateData:
        BlockDeviceMappings:
          - Ebs:
              VolumeSize: 8
              VolumeType: gp2
              DeleteOnTermination: true
              Encrypted: true
            DeviceName: /dev/sda1
        IamInstanceProfile:
          Arn: !GetAtt WebServerInstanceIamProfile.Arn
        ImageId: !Ref WebServerEc2AmiParam
        InstanceType: t3.medium
        SecurityGroupIds:
        - !Ref WebServerSecurityGroup
        MetadataOptions:
          HttpTokens: required
        UserData: 
          Fn::Base64:
            Fn::Sub: 
            - |
              MIME-Version: 1.0
              Content-Type: multipart/mixed; boundary="==BOUNDARY=="

              --==BOUNDARY==
              Content-Type: text/x-shellscript; charset="us-ascii"

              #!/bin/bash
              
              export PROXY_URL="${ProxyServer}"
              echo "PROXY_URL=$PROXY_URL"

              cat << EOF > /tmp/proxy
              export http_proxy="$PROXY_URL"
              export https_proxy="$PROXY_URL"
              export ftp_proxy="$PROXY_URL"
              export no_proxy="127.0.0.1,localhost,169.254.169.254"
              # For curl
              export HTTP_PROXY="$PROXY_URL"
              export HTTPS_PROXY="$PROXY_URL"
              export FTP_PROXY="$PROXY_URL"
              export NO_PROXY="127.0.0.1,localhost,169.254.169.254"
              EOF

              cat /tmp/proxy >> /etc/profile

              source /tmp/proxy

              yum update -y
              yum install -y git nfs-utils nfs4-acl-tools nfs-common python3 python3-pip python3-setuptools telnet bind-utils nmap-ncat nmap mc curl vim
              
              mkdir /data
              mount -t nfs -o nfsvers=4.1 ${OpenZfsDnsName}:/fsx/ /data
              mkdir /data/github
              mkdir /data/logs
              mkdir /data/deployments
              mkdir /data/deployments/www-static
              mkdir /data/deployments/intranet-static
              chown ec-user.ec2-user /data/deployments
              chown ec-user.ec2-user /data/deployments/www-static
              chown ec-user.ec2-user /data/deployments/intranet-static
              chmod 777 /data/github
              chmod 777 /data/logs
              chmod 777 /data/deployments
              chmod 777 /data/deployments/*

              echo "GITHUB_WORKDIR=/data/github" >> /etc/environment
              echo "DEPLOYMENT_TARGET_DIR=/data/deployments" >> /etc/environment

              export GITHUB_WORKDIR=/data/github
              export DEPLOYMENT_TARGET_DIR=/data/deployments

              amazon-linux-extras install docker
              service docker start
              usermod -a -G docker ec2-user
              chkconfig docker on

              # PUBLIC SITE
              docker run -it --rm -d -p 8080:80 --name web-public -v $DEPLOYMENT_TARGET_DIR/www-static:/usr/share/nginx/html nginx

              # PRIVATE SITE
              docker run -it --rm -d -p 8081:80 --name web-internal -v $DEPLOYMENT_TARGET_DIR/intranet-static:/usr/share/nginx/html nginx

              --==BOUNDARY==--
            - ProxyServer:
                Fn::Sub:
                - "http://proxy.${DomainName}:8080"
                - DomainName: !Ref PublicDnsNameParam
              OpenZfsDnsName:
                Fn::ImportValue: !Sub "${FsxStackNameParam}-StaticWebRootFsxFilesystemDNSName"
      TagSpecifications: 
      - ResourceType: "launch-template"
        Tags: 
          - Key: "Role"
            Value: "Web-server"


#######################################################################################################################
###                                                                                                                 ###
###                                    WEB SERVER LOAD BALANCER - PUBLIC SUBNET                                     ###
###                                                                                                                 ###
#######################################################################################################################


  PublicVpcWebServer8080Elbv2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: "/index.html"
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 5
      IpAddressType: "ipv4"
      Name: "PubVpcWebServer8080Elbv2TG"
      Port: 8080
      Protocol: "HTTP"
      TargetType: "instance"
      UnhealthyThresholdCount: 3
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackNameParam}-PublicVpcId"

  PublicVpcWebServer8081Elbv2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: "/index.html"
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 5
      IpAddressType: "ipv4"
      Name: "PubVpcWebServer8081Elbv2TG"
      Port: 8081
      Protocol: "HTTP"
      TargetType: "instance"
      UnhealthyThresholdCount: 3
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackNameParam}-PublicVpcId"

  WebServerAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      AutoScalingGroupName: !Sub "${AWS::StackName}-WebServerASG"
      DesiredCapacity: "1"
      LaunchTemplate: 
        LaunchTemplateId: !Ref WebServerInstanceHostLaunchTemplate
        Version: !GetAtt WebServerInstanceHostLaunchTemplate.LatestVersionNumber
      MaxSize: "4"
      MinSize: "1"
      NewInstancesProtectedFromScaleIn: false
      VPCZoneIdentifier: 
        - Fn::ImportValue: !Sub "${VpcStackNameParam}-PublicVpcSubnet1Id"
        - Fn::ImportValue: !Sub "${VpcStackNameParam}-PublicVpcSubnet2Id"
        - Fn::ImportValue: !Sub "${VpcStackNameParam}-PublicVpcSubnet3Id"
      TargetGroupARNs: 
      - !Ref PublicVpcWebServer8080Elbv2TargetGroup
      - !Ref PublicVpcWebServer8081Elbv2TargetGroup
      Tags: 
      - Key: "Name"
        Value: "WebServerNode"
        PropagateAtLaunch: true

  PublicVpcWebServerElbv2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "PrivVpcWebServerElbv2SG"
      GroupDescription: "Enable Web Server access on the inbound port for ELB"
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackNameParam}-PublicVpcId"
      SecurityGroupEgress:
      - DestinationSecurityGroupId: !Ref WebServerSecurityGroup
        IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
      - DestinationSecurityGroupId: !Ref WebServerSecurityGroup
        IpProtocol: tcp
        FromPort: 8081
        ToPort: 8081
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !Ref FirstTrustedInternetCiderParam
      - IpProtocol: tcp
        FromPort: 8443
        ToPort: 8443
        CidrIp: !Ref FirstTrustedInternetCiderParam
      Tags:
        - Key: Name
          Value: PubVpcWebServerElbv2SG

  PublicVpcWwwDomainWebServerElbv2:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: "ipv4"
      Name: "PubVpcWwwDomWebServerElbv2"
      SubnetMappings: 
      - SubnetId:
          Fn::ImportValue: !Sub "${VpcStackNameParam}-PublicVpcSubnet1Id"
      - SubnetId:
          Fn::ImportValue: !Sub "${VpcStackNameParam}-PublicVpcSubnet2Id"
      - SubnetId:
          Fn::ImportValue: !Sub "${VpcStackNameParam}-PublicVpcSubnet3Id"
      SecurityGroups: 
      - !Ref PublicVpcWebServerElbv2SecurityGroup
      Type: "application"

  WebServerAcmCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties: 
      DomainName: 
        Fn::Sub:
        - "*.${DomainName}"
        - DomainName: !Ref PublicDnsNameParam
      DomainValidationOptions: 
      - DomainName: !Ref PublicDnsNameParam
        HostedZoneId: !Ref PublicDnsHostedZoneIdParam
      ValidationMethod: "DNS"

  PublicVpcWebServer8080Elbv2Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      Certificates:
      - CertificateArn: !Ref WebServerAcmCertificate
      DefaultActions: 
      - Type: "forward"
        TargetGroupArn: !Ref PublicVpcWebServer8080Elbv2TargetGroup
      LoadBalancerArn: !Ref PublicVpcWwwDomainWebServerElbv2
      Port: 443
      Protocol: "HTTPS"
      SslPolicy: "ELBSecurityPolicy-2016-08"

  PublicVpcWebServer8081Elbv2Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      Certificates:
      - CertificateArn: !Ref WebServerAcmCertificate
      DefaultActions: 
      - Type: "forward"
        TargetGroupArn: !Ref PublicVpcWebServer8081Elbv2TargetGroup
      LoadBalancerArn: !Ref PublicVpcWwwDomainWebServerElbv2
      Port: 8443
      Protocol: "HTTPS"
      SslPolicy: "ELBSecurityPolicy-2016-08"

  PublicVpcWebServer80Elbv2Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
      - Type: "fixed-response"
        FixedResponseConfig: 
          ContentType: "text/plain"
          MessageBody: "Please use the secure port when using this service."
          StatusCode: "200"
      LoadBalancerArn: !Ref PublicVpcWwwDomainWebServerElbv2
      Port: 80
      Protocol: "HTTP"

  # WwwServerListenerRule:
  #   Type: AWS::ElasticLoadBalancingV2::ListenerRule
  #   Properties: 
  #     Actions: 
  #       - Action
  #     Conditions: 
  #       - RuleCondition
  #     ListenerArn: String
  #     Priority: Integer


  WebServerPublicDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref PublicDnsHostedZoneIdParam
      Name:
        Fn::Sub:
        - "www.${DomainName}"
        - DomainName: !Ref PublicDnsNameParam
      ResourceRecords:
      - !GetAtt PublicVpcWwwDomainWebServerElbv2.DNSName
      TTL: 300
      Type: "CNAME"

  WebServerPrivateDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref PublicDnsHostedZoneIdParam
      Name:
        Fn::Sub:
        - "internal.${DomainName}"
        - DomainName: !Ref PublicDnsNameParam
      ResourceRecords:
      - !GetAtt PublicVpcWwwDomainWebServerElbv2.DNSName
      TTL: 300
      Type: "CNAME"
  

#######################################################################################################################
###                                                                                                                 ###
###                                                 API HTTP GATEWAY                                                ###
###                                                                                                                 ###
#######################################################################################################################

  # PrivateEventApiGateway:
  #   Type: AWS::ApiGatewayV2::Api
  #   Properties: 
  #     CorsConfiguration:
  #       AllowCredentials: true
  #       AllowHeaders: 
  #       - "Content-Type"
  #       - "X-Amz-Date"
  #       - "Authorization"
  #       - "X-Api-Key"
  #       - "X-Amz-Security-Token"
  #       AllowMethods: 
  #       - OPTIONS
  #       - GET
  #       - POST
  #       - PUT
  #       - DELETE
  #       AllowOrigins: 
  #         Fn::Split:
  #         - ","
  #         - !Ref CorsTrustedDomainsParam
  #       ExposeHeaders: 
  #       - "Date"
  #       - "x-api-id"
  #       MaxAge: 86400
  #     Description: "A Private API Gateway"
  #     DisableExecuteApiEndpoint: false  # For production, this will typically be disabled/true to force clients to use the custom domain
  #     Name: "lab3-api"
  #     ProtocolType: "HTTP"
  #     Version: "v1"

# Outputs:

#   PrivateEventApiGatewayId:
#     Description: "PrivateEventApiGateway ID"
#     Value: !Ref PrivateEventApiGateway
#     Export:
#       Name: !Sub "${AWS::StackName}-PrivateEventApiGatewayId"

#   PrivateEventApiGatewayEndPoint:
#     Description: "PrivateEventApiGateway EndPoint"
#     Value: !GetAtt PrivateEventApiGateway.ApiEndpoint
#     Export:
#       Name: !Sub "${AWS::StackName}-PrivateEventApiGatewayEndPoint"
